module Numerals

True a b := a
False a b := b

and A B := A B A

{Truth table for `and` operator}
assert and False False = False
assert and False True = False
assert and True False = False
assert and True True = True

or A B := A A B

{Truth table for `or` operator}
assert or False False = False
assert or False True = True
assert or True False = True
assert or True True = True

not A := A False True

{Truth table for `not` operator}
assert not True = False
assert not False = True

first a b := a
second a b := b

{`first` and `second` should return respective arguments}
assert first <1> () = <1>
assert second () <2> = <2>

0 f x := x

assert {0 should not apply a function}
    0 (first False) True = True

1 f x := f x

assert {1 should apply function once}
    1 (first False) True = False

2 f x := f (f x)

assert {2 plus 2 should increment the box 4 times}
    plus 2 2 (eat! #a) () = ()
    | equals! #a <4>

plus A B f x := A f (B f x)

assert {0 plus 0 should not apply a function}
    plus 0 0 (first False) True = True
assert {0 plus 1 should apply function at least once}
    plus 0 1 (first False) True = False
assert {1 plus 1 should increment the box 2 times}
    plus 1 1 (eat! #a) () = ()
    | equals! #a <2>

succ A f x := f (A f x)

assert {succ 1 should increment the box 2 times}
    succ 1 (eat! #a) () = ()
    | equals! #a <2>

mul A B f x := A (B f) x

assert {mul 2 3 should increment the box 6 times}
    mul 2 3 (eat! #a) () = ()
    | equals! #a <6>

3 f x := f (f (f x))
exp A B := B A

assert {exp 2 3 should increment the box 8 times}
    exp 2 3 (eat! #a) () = ()
    | equals! #a <8>

minus A B := B pred A

assert {minus 3 2 should increment the box 1 time}
    minus 3 2 (eat! #a) () = ()
    | equals! #a <1>

id x := x
first x y := x
inc f g h := h (g f)
pred A f x := A (inc f) (first x) id

assert {pred 3 should increment the box 2 times}
    pred 3 (eat! #a) () = ()
    | equals! #a <2>

is-zero A := A (first False) True

assert {is-zero 0 should be True}
    is-zero 0 = True
assert {is-zero 1 should be False}
    is-zero 1 = False
assert {is-zero (pred 1) should be True}
    is-zero (pred 1) = True
assert {is-zero (succ 0) should be False}
    is-zero (succ 0) = False

{Set up testing side-effect}
eat! B *rest := *rest
    | increment! B