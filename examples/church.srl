0 f x := x
1 f x := f x
2 f x := f (f x)
3 f x := f (f (f x))
6 := mul 2 3

plus A B f x := A f (B f x)
succ A f x := f (A f x)
mul A B f x := A (B f) x
exp A B := B A

id x := x
first x y := x
inc f g h := h (g f)
pred A f x := A (inc f) (first x) id

id! B *rest := rest
 | inc! B

true a b := a
false a b := b

is-zero A := A (first false) true